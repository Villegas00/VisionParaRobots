# -*- coding: utf-8 -*-
"""Tarea-01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11UadUH9SSeAE4aaGYGK2Abw3MwTTeLMB
"""

import numpy as np 
import matplotlib.pyplot as plt 
import matplotlib.image as mpimg 
import cv2
import numpy as np

from skimage.color import rgb2gray

"""Funcion Imagen"""

def imagen(dir_imagen):
  img = mpimg.imread(dir_imagen)
  plt.figure()
  img = rgb2gray(img)

  if img.max() <255:
    for x in range(0,img.shape[0]):     
      for y in range(0,img.shape[1]):
        img[x,y]=np.interp(img[x,y],(0,1),(0,255))

  return img

"""funcion Kernel Gaussiano"""

def gau_kernel(img,kernel_size, sigma):
  kernel = np.zeros((kernel_size, kernel_size))
  for i in range(kernel_size):
      for j in range(kernel_size):
          kernel[i, j] = np.exp(-(i**2 + j**2) / (2*sigma**2))
  kernel = kernel / (2 * np.pi * sigma ** 2)

  kernel = np.flipud(np.fliplr(kernel))
  output = np.zeros_like(img)            

  img_pad = np.zeros((img.shape[0] + (kernel.shape[0]-1), 
                             img.shape[1] + (kernel.shape[1]-1)))   
  img_pad[(kernel.shape[0]//2):-(kernel.shape[0]//2), 
                 (kernel.shape[1]//2):-(kernel.shape[1]//2)] = img

    
  for x in range(img.shape[0]):     
    for y in range(img.shape[1]):
      for m in range (-1,1):
        for l in range(-1,1):
          output[x,y] = np.median(img_pad[x:x + kernel.shape[0],y:y + kernel.shape[1]])
  
  return output

"""Funcion Kernel"""

def kernel(img,id_kernel):

  rows = img.shape[0]
  cols = img.shape[1]

  kernel = np.flipud(np.fliplr(id_kernel))    
  output = np.zeros_like(img)            
    
  img_pad = np.zeros((img.shape[0] + (kernel.shape[0]-1), 
                             img.shape[1] + (kernel.shape[1]-1)))   
  img_pad[(kernel.shape[0]//2):-(kernel.shape[0]//2), 
                 (kernel.shape[1]//2):-(kernel.shape[1]//2)] = img

  for x in range(img.shape[0]):    
    for y in range(img.shape[1]):
      for m in range (-1,1):
        for l in range(-1,1):
          output[x,y]=(kernel*img_pad[x:x + kernel.shape[0],y:y + kernel.shape[1]]).sum()

  return output

"""i)"""

dir_img = r'/content/sample_data/test_01.jpg'

img = imagen(dir_img)
print("Image type: ", type(img)) 
print("Image shape: ", img.shape) 
print("Image size: ", img.size) 
print("Image min: ", img.min()) 
print("Image max: ", img.max()) 
print("Image mean: ", img.mean()) 
print("Image pixel img[0,0]", img[0,0]) 

plt.imshow(img, cmap = 'gray', vmin = 0, vmax = 255) 
plt.axis('off')
plt.colorbar()

"""III)"""

kernel_size = 3
sigma = 1 
output=gau_kernel(img,kernel_size, sigma)
plt.imshow(output, cmap=plt.cm.gray,  vmin=0, vmax=255)
plt.axis('off')
plt.show()
print("Image size: ", img.size)

kernel_size = 3
sigma = 4 
output=gau_kernel(img,kernel_size, sigma)
plt.imshow(output, cmap=plt.cm.gray,  vmin=0, vmax=255)
plt.axis('off')
plt.show()
print("Image size: ", img.size)

kernel_size = 3
sigma = 8 
output=gau_kernel(img,kernel_size, sigma)
plt.imshow(output, cmap=plt.cm.gray,  vmin=0, vmax=255)
plt.axis('off')
plt.show()
print("Image size: ", img.size)

kernel_size = 5
sigma = 1 
output=gau_kernel(img,kernel_size, sigma)
plt.imshow(output, cmap=plt.cm.gray,  vmin=0, vmax=255)
plt.axis('off')
plt.show()
print("Image size: ", img.size)

kernel_size = 5
sigma = 4 
output=gau_kernel(img,kernel_size, sigma)
plt.imshow(output, cmap=plt.cm.gray,  vmin=0, vmax=255)
plt.axis('off')
plt.show()
print("Image size: ", img.size)

kernel_size = 5
sigma = 8 
output=gau_kernel(img,kernel_size, sigma)
plt.imshow(output, cmap=plt.cm.gray,  vmin=0, vmax=255)
plt.axis('off')
plt.show()
print("Image size: ", img.size)

kernel_size = 9
sigma = 1 
output=gau_kernel(img,kernel_size, sigma)
plt.imshow(output, cmap=plt.cm.gray,  vmin=0, vmax=255)
plt.axis('off')
plt.show()
print("Image size: ", img.size)

kernel_size = 9
sigma = 4 
output=gau_kernel(img,kernel_size, sigma)
plt.imshow(output, cmap=plt.cm.gray,  vmin=0, vmax=255)
plt.axis('off')
plt.show()
print("Image size: ", img.size)

kernel_size = 9
sigma = 8 
output=gau_kernel(img,kernel_size, sigma)
plt.imshow(output, cmap=plt.cm.gray,  vmin=0, vmax=255)
plt.axis('off')
plt.show()
print("Image size: ", img.size)

"""II)"""

id_kernel = np.array([[1, 1, 1], [0,0,0], [-1,-1,-1]])

output=kernel(img,id_kernel)
plt.imshow(output, cmap=plt.cm.gray, vmin=0, vmax=255)
print("Image size: ", img.size)

id_kernel = np.array([[1, 0, -1], [1,0,-1], [1,0,-1]])
output=kernel(img,id_kernel)
plt.imshow(output, cmap=plt.cm.gray, vmin=0, vmax=255)
print("Image size: ", img.size)